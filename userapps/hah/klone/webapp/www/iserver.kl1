<%! /* -*- mode:c;coding:utf-8; -*- */
#include "minIni.h"
#include "login.h"
#include "const.h"
#include "utils.h"
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define sizearray(x) (sizeof(x) / sizeof(x[0]))
static int reboot = 0;
static const char *inifile = "/etc/xap.d/iserver.ini";

static struct {
	 char authmode[2];
	 char passwd[64];
	 char enable[2];
	 char port[5];
	 char pacing[5];
	 char txseq[2];
	 char rxseq[2];
} ini;

static void readIni() {
	 ini_gets("iserver","enable","0",ini.enable,sizeof(ini.enable),inifile);
	 ini_gets("iserver","passwd","",ini.passwd,sizeof(ini.passwd),inifile);
	 ini_gets("iserver","authmode","0",ini.authmode,sizeof(ini.authmode),inifile);
	 ini_gets("iserver","port","9996",ini.port,sizeof(ini.port),inifile);
	 ini_gets("iserver","pacing","20",ini.pacing,sizeof(ini.pacing),inifile);
	 ini_gets("iserver","txseq","0",ini.txseq,sizeof(ini.txseq),inifile);
	 ini_gets("iserver","rxseq","0",ini.rxseq,sizeof(ini.rxseq),inifile);
}

static void submit_form() {
	 int restart=1;

	 const char *enable = request_get_arg(request,"enable");
	 if(enable)
	     {
		 if((*enable == '1' && ini.enable[0] == '0') ||
		    (*enable == '0' && ini.enable[0] == '1')) 
		     {
			 ini_puts("iserver","enable",enable,inifile);
			 restart=1;
		     }
	     }

	 const char *passwd = request_get_arg(request,"passwd");
	 if(passwd && strlen(passwd) > 0 && strcmp(passwd,ini.passwd)) {
		  ini_puts("iserver","passwd",passwd,inifile);
		  restart = 1;
	 }

	 const char *port = request_get_arg(request,"port");
	 if(port && strlen(port) > 0 && strcmp(port,ini.port)) {
		  ini_puts("iserver","port",port,inifile);
		  restart = 1;
	 }

	 const char *pacing = request_get_arg(request,"pacing");
	 if(pacing && strlen(pacing) > 0 && strcmp(pacing,ini.pacing)) {
		  ini_puts("iserver","pacing",pacing,inifile);
		  restart = 1;
	 }

	 const char *auth = request_get_arg(request,"authmode");
	 if(auth && strcmp(auth,ini.authmode)) {
		  ini_puts("iserver","authmode",auth,inifile);
		  restart = 1;
	 }

	 const char *txseq = request_get_arg(request,"txseq");
	 if(txseq && strlen(txseq) > 0 && strcmp(txseq,ini.txseq)) {
		  ini_puts("iserver","txseq",txseq,inifile);
		  restart = 1;
	 }

	 const char *rxseq = request_get_arg(request,"rxseq");
	 if(rxseq && strlen(rxseq) > 0 && strcmp(rxseq,ini.rxseq)) {
		  ini_puts("iserver","rxseq",rxseq,inifile);
		  restart = 1;
	 }

	 if(restart) {
	   system("/etc/init.d/xap restart iserver");
	 }
}
/**********************************************************************/
%>
<%
  int i;
  REQUIRE_AUTH(SCRIPT_NAME);
  const char *action = request_get_arg(request,"action");
  readIni();
  if(action && strcmp(action,"Apply") == 0) {
      submit_form();
      readIni();
  }
%>
<html>
<head>
<%@include component/style.kl1%>
<script type="text/javascript">
function to_submit(F) {
F.save_button.value = "Saving";
F.action.value="Apply";
apply(F);
}
addEvent(window,"load",function() {
	 show_layer_ext(document.services.enable, 'idph', 1 == <%= ini.enable %>);
	 });
</script>
</head>
<body class="gui">

<div id="wrapper">
<div id="content">

<%@include component/heading.kl1%>

<div id="main">
<div id="contents">
<form name="services" action="<%= SCRIPT_NAME %>" method="post">
<input type="hidden" name="submit_button"/>
<input type="hidden" name="action"/>
<br/>
<h2>iServer Settings</h2><div>

The iServer is a TCP/xAP gateway used by the xAPFlash/Joggler HMI application

<fieldset>
  <legend>iServer </legend>
  <div class="setting">
    <div class="label">Start service</div>
	<input class="spaceradio" type="radio" value="1" name="enable" onclick="show_layer_ext(this, 'idph', true);"<% if(ini.enable[0] == '1') { %> checked="checked"<% } %>/>Enable&nbsp;
    <input class="spaceradio" type="radio" value="0" name="enable" onclick="show_layer_ext(this, 'idph', false);"<% if(ini.enable[0] == '0') { %> checked="checked"<% } %>/>Disable
  </div>
  <div class="setting" id="idph">

<fieldset>
  <legend>Configuration</legend>

  <div class="setting">
    <div class="label">iServer Port</div>
	 <input maxlength="5" size="5" name="port" value="<%= ini.port %>" onblur="valid_range(this,1,32767,'Port')"/>
	 <span class="default">(Default: 9996)</span>
  </div>

  <div class="setting">
    <div class="label">Transmit pacing</div>
	 <input maxlength="5" size="5" name="pacing" value="<%= ini.pacing %>" onblur="valid_range(this,10,1000,'Port')"/>
	 <span class="default">(Default: 20ms)</span>
  </div>

  <div class="setting">
    <div class="label">Client authentication mode</div>
	<input class="spaceradio" type="radio" value="1" name="authmode" <% if(ini.authmode[0] == '1') { %> checked="checked"<% } %>/>Enable&nbsp;
        <input class="spaceradio" type="radio" value="0" name="authmode" <% if(ini.authmode[0] == '0') { %> checked="checked"<% } %>/>Disable
  </div>

  <div class="setting">
    <div class="label">Password</div>
    <input maxlength="64" size="20" name="passwd"/>
    <span class="default">Used when authentication enabled</span>
  </div>
</fieldset>
<%
	if (request_get_arg(request, "debug")) {
%>
<fieldset>
  <legend>Debugging</legend>
  <div class="setting">
	<div class="label">Tx Sequence number injection</div>
	<input class="spaceradio" type="radio" value="1" name="txseq" <% if(ini.txseq[0] == '1') { %> checked="checked"<% } %>/>On&nbsp;
        <input class="spaceradio" type="radio" value="0" name="txseq" <% if(ini.txseq[0] == '0') { %> checked="checked"<% } %>/>Off
  </div>
  <div class="setting">
    <div class="label">Rx Sequence number injection</div>
	<input class="spaceradio" type="radio" value="1" name="rxseq" <% if(ini.rxseq[0] == '1') { %> checked="checked"<% } %>/>On&nbsp;
        <input class="spaceradio" type="radio" value="0" name="rxseq" <% if(ini.rxseq[0] == '0') { %> checked="checked"<% } %>/>Off
  </div>
  </fieldset>
<%
  }
%>
<fieldset>
  <legend>Status</legend>
<%
{
char buffer[512];
struct sockaddr_in serv;
int fd;
if((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
	io_printf(out, "socket(): %s", strerror(errno));
} else {
	   serv.sin_family = AF_INET;
	   serv.sin_addr.s_addr = inet_addr("127.0.0.1");
	   serv.sin_port = htons(78); // iServer listens here
	   if(connect(fd, (struct sockaddr *)&serv, sizeof(serv)) < 0) {
		   io_printf(out, "%s: check iServer is running", strerror(errno));
	   }  else {
		   write(fd,"GET /index.html \r\n",18);
		   int i = recv(fd, buffer, 510, 0);
		   buffer[i] = 0;
		   char *body = strstr(buffer,"\r\n\r\n");
		   io_write(out, body, i - (body - buffer));
		   // In case there is more....
		   while( (i = recv(fd, buffer, 511, 0)) > 0)
			   io_write(out, buffer, i);
	   }
	   close(fd);
}
}
%>
</fieldset>

</div>
</fieldset>


</div>
<br/>

<div class="submitFooter">
<input type="button" name="save_button" value="Save Settings" onclick="to_submit(this.form)"/>
<input type="reset" value="Cancel Changes"/>
</div>
</form>

</div>
</div>

<div id="floatKiller"></div>
<%@include component/statusinfo.kl1%>

</div>
</div>

</body>
</html>
