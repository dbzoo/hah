<%! /* -*- mode:c;coding:utf-8; -*- */
#include "minIni.h"
#include "login.h"
#include "const.h"
#include "comms.h"

#define ACT_ON 0
#define ACT_OFF 1
#define ACT_TOGGLE 2
#define ACT_SETLCD 3

static const char *inifile = "/etc/xap.d/xap-livebox.ini";
static char *action_s[] = {"on","off","toggle","lcd"};

static struct {
	 char temp_unit[2];
	 int devices1wire;
	 int devicesrf;
} ini;


// Alternative TD class for ODD rows
char *alt_td(int row) {
   if (row % 2 == 0)
     return "<td>";
   else
     return "<td class=\"alt\">";    
}

static void build_action(char *item, int count, char *action, int action_type, int base) {
	 int i;
	 char name[10];	 
	 for(i=base; i<count+base; i++) {
		  sprintf(name,"%s.%d",item, i);
		  const char *key = request_get_arg(request, name);
		  if(key) {
			   strcat(action, " ");
			   strcat(action, name);
			   strcat(action,",");
			   switch(action_type) {
			   case ACT_ON:
					strcat(action,"on");
					break;
			   case ACT_OFF:
					strcat(action,"off");
					break;
			   case ACT_TOGGLE:
					strcat(action,"toggle");
					break;
			   }
		  }
	 }	 
}

// Process form submission
static void process_form() {
  const char *action = request_get_arg(request,"action");
  char *wait;
  int i, action_type;

  if(action == NULL || *action == 0) return;

  // What sort of action are we?
  action_type = -1;
  for(i=0; i < 4; i++) {
    if(strcmp(action, action_s[i]) == 0) {
        action_type = i; 
		break;
    }
  }
  // if somebody is mangling the URL ths could happen.
  if(action_type < 0) return;  

  char cmd[100];
  if (action_type == ACT_SETLCD) {
	   strcpy(cmd,"lcd ");
	   const char *key = request_get_arg(request, "lcd");
	   strcat(cmd, key);
  }
  else {
	   strcpy(cmd,"action");
	   build_action("relay", 4, cmd, action_type, 1);
	   build_action("rf", ini.devicesrf, cmd, action_type, 1);
	   
	   build_action("ppe.1", 8, cmd, action_type, 0);
	   build_action("ppe.2", 8, cmd, action_type, 0);
	   build_action("ppe.3", 8, cmd, action_type, 0);
	   build_action("ppe.4", 8, cmd, action_type, 0);
	   build_action("ppe.5", 8, cmd, action_type, 0);
	   build_action("ppe.6", 8, cmd, action_type, 0);
	   build_action("ppe.7", 8, cmd, action_type, 0);
	   build_action("ppe.8", 8, cmd, action_type, 0);
  }
  send_cmd(cmd);
}

static void readIni() {
   ini.devices1wire = ini_getl("1wire","devices", 0, inifile);
   ini.devicesrf = ini_getl("rf","devices", 0, inifile);
   ini_gets("1wire","temp_unit", "C", ini.temp_unit, sizeof(ini.temp_unit), inifile);
}
%>
<%
if(REQUIRE_AUTH(SCRIPT_NAME)) {
  readIni();
  process_form();
  response_disable_caching(response);
}
%>
<html>
<head>
<%@include component/style.kl1%>
<script type="text/javascript">
function comboSubmit() {
    frmControl.submit();
}
</script>
</head>
<body class="gui">
<div id="wrapper">
<div id="content">

<%@include component/heading.kl1%>

<div id="main">
<div id="contents">
<br/>
<h2>Control Panel</h2>

<%
  int i,k;
%>
<form name=frmControl action="<%= SCRIPT_NAME %>" method="post">
<table><tr>

<%
  if(ini.devicesrf > 0) {
%>
<td valign="top"><fieldset>
<legend>RF</legend>
<table>
<tr><th>Item</th><th>State</th><th>&nbsp;</th></tr>
<%
  k = 1;
  for(i=1; i<=ini.devicesrf; i++, k++) {
	   io_printf(out,"<tr><td>%s</td>", iniGetDynLabel("rf",i));
     io_printf(out,"<td align=\"right\">%s</td>", query("rf",i));
     io_printf(out,"<td><input type=checkbox name=\"rf.%d\"></td></tr>", i);
  }
%>
</table>
</fieldset></td>
<%
}
%>

<td valign="top"><fieldset>
<legend>Relay</legend>
<table>
<tr><th>Item</th><th>State</th><th>&nbsp;</th></tr>
<%
  k = 1;
  for(i=1; i<5; i++, k++) {
	   io_printf(out,"<tr><td>%s</td>", iniGetDynLabel("relay",i));
	   io_printf(out,"<td align=\"right\">%s</td>", query("relay",i));
	   io_printf(out,"<td><input type=checkbox name=\"relay.%d\"></td></tr>", i);
  }
%>
</table>
</fieldset></td>

<td valign="top"><fieldset>
<legend>Input</legend>
<table>
<tr><th>Item</th><th>State</th></tr>
<%
  k = 1;
  for(i=1; i<5; i++, k++) {
	   io_printf(out,"<tr><td>%s</td>", iniGetDynLabel("input",i));
	   io_printf(out,"<td align=\"right\">%s</td>", query("input",i));
	   io_printf(out,"</tr>");
  }
%>
</table>
</fieldset></td>

<%
  if(ini.devices1wire > 0) {
%>
<td valign="top"><fieldset>
<legend>Temperature</legend>
<table>
<tr><th>Item</th><th>State</th></tr>
<%
  k = 1;
  for(i=1; i<=ini.devices1wire; i++, k++) {
	   io_printf(out,"<tr><td>%s</td>", iniGetDynLabel("sensor",i));
	   char *c  = query("1wire",i);
	   io_printf(out,"<td align=\"right\">");
	   if (*c == '?') {
			io_printf(out,"%s", c);
	   } else {
			if (ini.temp_unit[0] == 'C') {
				 io_printf(out,"%s&deg;C </td>", c);
			} else { // Farenheit
				 int f  = atoi(c) * 9 / 5 + 32;
				 io_printf(out,"%d&deg;F </td>", f);
			}
	   }	   
	   io_printf(out,"</tr>");
  }
%>
</table>
</fieldset></td>
<%
}
%>

</tr>

<tr>
<%
static char section[30];
static char mode[30];
static int section_num;
for (i = 0; ini_getsection(i, section, sizeof(section), inifile) > 0; i++) {
	if(strncmp("ppe",section,3) != 0) continue;
	if(ini_gets(section,"mode","",mode,sizeof(mode),inifile) == 0) continue;
	if(strcasecmp("pin",mode) != 0) continue;
	section_num = atoi(section+3);
	if(section_num < 1 || section_num > 8) continue;
%>

<td valign="top"><fieldset>
<legend><%= section %></legend>
<table>
<tr><th>Pin</th><th>State</th><th>&nbsp;</th></tr>
<%
  for(k=0; k<8; k++) {
	  char buf[20];
	  snprintf(buf,sizeof(buf),"query ppe.%d.%d", section_num, k);
	  io_printf(out,"<tr><td>%d</td>", k);
	  io_printf(out,"<td align=\"right\">%s</td>", send_cmd(buf));
	  io_printf(out,"<td><input type=checkbox name=\"ppe.%d.%d\"></td></tr>", section_num, k);
  }
%>
</table>
</fieldset></td>
<%
	  if(i && i % 4 == 0) { io_printf(out,"</tr><tr>"); }
}
%>
</tr>

<tr><td colspan=4>
<fieldset>
<legend>LCD</legend>
<%
	   io_printf(out,"<input name=\"lcd\" value=\"%s\" size=\"40\"/>", send_cmd("query lcd"));
%>
</fieldset>
</td></tr>
</table>

<br/>

<div class="submitFooter">
<input type="submit" value="Refresh"/>
<input type="reset" value="Cancel Changes"/>
<select name="action" size=1 onChange="comboSubmit()">
<option value="" selected>Action&nbsp;</option>
<option value="on">On
<option value="off">Off
<option value="toggle">Toggle
<option value="lcd">Set LCD
</select>
</div>
</form>

</div>
</div>

<div id="floatKiller"></div>
<%@include component/statusinfo.kl1%>

</div>
</div>

</body>
</html>
