<%! /* -*- mode:c;coding:utf-8; -*- */
#include "minIni.h"
#include "login.h"
#include "const.h"

#define sizearray(a)  (sizeof(a) / sizeof((a)[0]))

static int reboot = 0;

// List of xap-daemons
struct _daemon {
	char *file;
	char *section;
	char *name;
	char *dflt;
	char uid[5];
} daemons[] = {
  //	{"xap-bridge","bridge","Bridge","00D3",""},
	{"xap-snoop","snoop","Snoop","00D4",""},
	{"xap-serial", "serial","Serial","00D5",""},
	{"xap-xively", "xively","Xively","00D7",""},
	{"plugboard", "plugboard","Plugboard","00D8",""},
	{"xap-twitter", "twitter","Twitter","00D9",""},
	{"xap-googlecal", "googlecal","Google Calendar","00DA",""},
	{"xap-livebox", "xap","Livebox","00DB", ""},
	{"xap-currentcost", "currentcost","CurrentCost","00DC",""},
	{"xap-sms", "sms","SMS","00DD",""},
	{"iserver", "iserver","iServer","00DE",""}
};
#define daemonCount (sizeof(daemons)/sizeof(daemons[0]))
char iniDevice[32];

static void submit_form() {
	 const char *device = request_get_arg(request,"deviceid");
	 if(device && strcmp(device,iniDevice)) {
		 ini_puts("xap","deviceid",device, "/etc/xap.d/system.ini");
		 reboot = 1;
	 }
	 
	 int i;
	 char uidKey[5];
	 for(i=0; i<daemonCount; i++) {
	         snprintf(uidKey, sizeof uidKey, "uid%d", i);
		 const char *uid = request_get_arg(request, uidKey);
		 if(uid && strcmp(uid, daemons[i].uid)) {
			 char inifile[40];
			 snprintf(inifile, sizeof inifile, "/etc/xap.d/%s.ini", daemons[i].file);
			 ini_puts(daemons[i].section,"uid",uid, inifile);
			 reboot = 1;
		 }
	 }
}

static void readIni() {
	 int i;
	 char uidKey[5];

	 ini_gets("xap","deviceid","",iniDevice,sizeof(iniDevice), "/etc/xap.d/system.ini");
	 for(i=0; i<daemonCount; i++) {
		 char inifile[40];
		 snprintf(inifile, sizeof inifile, "/etc/xap.d/%s.ini", daemons[i].file);
		 snprintf(uidKey, sizeof uidKey, "uid%d", i);
		 ini_gets(daemons[i].section,"uid",daemons[i].dflt,daemons[i].uid,5,inifile);
	 }
}
%>
<%
int i;
REQUIRE_AUTH(SCRIPT_NAME);
readIni();
const char *action = request_get_arg(request,"action");
if(action && strcmp(action,"Apply") == 0) {
	 submit_form(out);
	 readIni();
}
if(action && strcmp(action,"Reboot") == 0) {
	  response_redirect(response, "reboot.kl1");
}
%>
<html>
<head>
<%@include component/style.kl1%>
<script type="text/javascript">
function to_submit(F) {
	F.save_button.value = "Saving";
	F.action.value = "Apply";
	apply(F);
}
function reboot(F) {
	 F.reboot_button.value = "Rebooting";
	 F.action.value = "Reboot";
	 apply(F);
}
</script>
</head>
<body class="gui">
<div id="wrapper">
<div id="content">

<%@include component/heading.kl1%>

<div id="main">
<div id="contents">
<br/>
<form name="frmControl" action="<%= SCRIPT_NAME %>" method="post">
<input type="hidden" name="action" />
<h2>HAH Device</h2>
<p>These settings should only need to be changed if you have more then one HAH box running on the same subnet.<br/>You must also ensure that each has a unique MAC address via the <a href="/setup.kl1">setup<a> page</p>

<fieldset>
  <legend>Device Settings</legend>

  <div class="setting">
    <div class="label">HAH Device</div>
    <input maxlength="30" size="25" name="device" value="<%= iniDevice %>"/>
    <span class="default">(Default: null)</span>
  </div>

<table>
<tr>
<th>Daemon</th>
<th>UID</th>
<th>Default</th>
<%
for(i=0; i<daemonCount; i++) {
%>
<tr>
<td><%= daemons[i].name%></td>
<td><input maxlength="4" size="4" name="uid<% io_printf(out,"%d",i);%>" value="<%= daemons[i].uid %>" onblur="isxdigit(this,'UID')"/></td>
<td><span class="default"><%= daemons[i].dflt %></span></td>
</tr>
<%
		       }
%>
</table>

</fieldset>

<br/>

<div class="submitFooter">
<input type="button" name="save_button" value="Save Settings" onclick="to_submit(this.form)" />
<input type="reset" value="Cancel Changes"/>
<% if(reboot) { %><input type="button" name="reboot_button" value="Reboot" onclick="reboot(this.form)" /><% } %>
</div>
</form>

</div>
</div>

<div id="floatKiller"></div>
<%@include component/statusinfo.kl1%>

</div>
</div>

</body>
</html>

