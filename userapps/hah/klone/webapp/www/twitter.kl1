<%! /* -*- mode:c;coding:utf-8; -*- */
#include "minIni.h"
#include "login.h"
#include "const.h"
#include "utils.h"
#include "tcurl.h"
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>

// HAH Twitter application keys
const char *CONSUMER_KEY = "hmGCdLfP9HjVfkzDSnw";
const char *CONSUMER_SECRET = "6iaSFRs6RFuILhjrBhUYDDEkUBGDsGcFNv7lQyoA";

#define sizearray(x) (sizeof(x) / sizeof(x[0]))
static int reboot = 0;

static struct {
	 char key[128];
	 char secret[128];
	 char ufreq[5];
	 char uid[5];
	 char instance[30];
	 char enable[2];
} ini;

static void readIni() {
	 ini_gets("twitter","enable","0",ini.enable,sizeof(ini.enable),con.inifile);
	 ini_gets("twitter","uid","00D9",ini.uid,sizeof(ini.uid),con.inifile);
	 ini_gets("twitter","instance","Twitter",ini.instance,sizeof(ini.instance),con.inifile);
	 ini_gets("twitter","access_key","",ini.key,sizeof(ini.key),con.inifile);
	 ini_gets("twitter","access_secret","",ini.secret,sizeof(ini.secret),con.inifile);
	 ini_gets("twitter","ufreq","30",ini.ufreq,sizeof(ini.ufreq),con.inifile);
}

static void submit_form(int restart_ok) {
	 int restart=1;

	 const char *enable = request_get_arg(request,"enable");
	 if(enable)
	     {
		 if((*enable == '1' && ini.enable[0] == '0') ||
		    (*enable == '0' && ini.enable[0] == '1')) 
		     {
			 ini_puts("twitter","enable",enable,con.inifile);
			 restart=1;
		     }
	     }

	 const char *uid = request_get_arg(request,"uid");
	 const char *instance = request_get_arg(request,"instance");
	 if(uid && strcmp(uid,ini.uid)) {
		  upperstr((char *)uid);
		  ini_puts("twitter","uid",uid,con.inifile);
		  restart = 1;
	 }
	 if(instance && strcmp(instance,ini.instance)) {
	          ini_puts("twitter","instance",instance,con.inifile);
		  restart = 1;
	 }

	 const char *ufreq = request_get_arg(request,"ufreq");
	 if(ufreq && strcmp(ufreq,ini.ufreq)) {
		  ini_puts("twitter","ufreq",ufreq,con.inifile);
		  restart = 1;
	 }

	 if(restart && restart_ok) {
	     char *argv[] = {"/etc/init.d/xap","restart","twitter", NULL};
	     subprocess(argv);
	 }
}
/**********************************************************************/
%>
<%
  int i;
  REQUIRE_AUTH(SCRIPT_NAME);
  const char *action = request_get_arg(request,"action");
  readIni();
  if(action && strcmp(action,"Apply") == 0) {
      submit_form(1);
      readIni();
  }
%>
<html>
<head>
<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=iso-8859-1"/>
<script type="text/javascript" src="common.js"></script>
<link type="text/css" rel="stylesheet" href="style/current/style.css"/>
<!--[if IE]><link type="text/css" rel="stylesheet" href="style/current/style_ie.css"/><![endif]-->
<title>Livebox</title>

<script type="text/javascript">
function to_submit(F) {
F.save_button.value = "Saving";
F.action.value="Apply";
apply(F);
}
addEvent(window,"load",function() {
	 show_layer_ext(document.services.enable, 'idph', 1 == <%= ini.enable %>);
	 });
</script>
</head>
<body class="gui">

<div id="wrapper">
<div id="content">

<%@include component/heading.kl1%>

<div id="main">
<div id="contents">
<form name="services" action="<%= SCRIPT_NAME %>" method="post">
<input type="hidden" name="submit_button"/>
<input type="hidden" name="action"/>
<br/>
<h2>Twitter Settings</h2><div>

<fieldset>
  <legend>Twitter</legend>
  <div class="setting">
    <div class="label">Start service</div>
	<input class="spaceradio" type="radio" value="1" name="enable" onclick="show_layer_ext(this, 'idph', true);"<% if(ini.enable[0] == '1') { %> checked="checked"<% } %>/>Enable&nbsp;
    <input class="spaceradio" type="radio" value="0" name="enable" onclick="show_layer_ext(this, 'idph', false);"<% if(ini.enable[0] == '0') { %> checked="checked"<% } %>/>Disable
  </div>
  <div class="setting" id="idph">

<fieldset>
  <legend>Configuration</legend>

  <div class="setting">
    <div class="label">xAP UID</div>
    <input maxlength="4" size="4" name="uid" value="<%= ini.uid %>" onblur="isxdigit(this,'UID')"/>
    <span class="default">(Default: 00D9, Range: 0000 - FFFF)</span>
  </div>

  <div class="setting">
    <div class="label">xAP Instance</div>
    <input maxlength="30" size="25" name="instance" value="<%= ini.instance %>"/>
    <span class="default">(Default: Twitter)</span>
  </div>

  <div class="setting">
    <div class="label">Update Frequency</div>
	 <input maxlength="5" size="5" name="ufreq" value="<%= ini.ufreq %>" onblur="valid_range(this,15,300,'Update Frequency')"/>
	 <span class="default">(Default: 30, 15-300 sec)</span>
  </div>

  <div class="Authorise">
    <div class="label">Account</div>
    <button type="submit" name="auth_button" value="1">Authorise with Twitter</button>
  </div>

</fieldset>

    <% // OAUTH AUTHORIZATION CALLBACK
    const char *oauth_verifier = request_get_arg(request,"oauth_verifier");
    if(oauth_verifier) {

     // Fetch temporary access keyss
     char *key = session_get(session,"key");
     char *secret = session_get(session,"secret");

     if (key && secret) {
       tcurl *c = new_tcurl(out);
       c->oauthAccessKey = key;
       c->oauthAccessSecret = secret;
       // Obtain access keys and verify us.
       oauthAuthorize(c, oauth_verifier);

       // Keys in tcurl are now the permenant keys.
       ini_puts("twitter","consumer_key", CONSUMER_KEY, con.inifile);
       ini_puts("twitter","consumer_secret", CONSUMER_SECRET, con.inifile);
       ini_puts("twitter","access_key", c->oauthAccessKey, con.inifile);
       ini_puts("twitter","access_secret", c->oauthAccessSecret, con.inifile);
       ini_puts("twitter","user", c->user, con.inifile);
       ini_puts("twitter","userid", c->userid, con.inifile);

       // We don't need the temporary access creds anymore.
       session_del(session,"key");
       session_del(session,"secret");

       free_tcurl(c);
%>
	 <p><b>Authorisation Successful</b></p>
<%       
     }
   } else {
      if(strlen(ini.key) == 0) {
%>
	<p><b>Authorisation has not been setup</b></p>
<%
      }
   }

// OAUTH REQUEST
    const char *auth = request_get_arg(request,"auth_button");
    if(auth && *auth == '1') {   // Authorisation button pressed?
      submit_form(0); // Save any outstanding FORM changes first.

      tcurl *c = new_tcurl(out);

      char callback_url[128];
      snprintf(callback_url, sizeof(callback_url),"http://%s:%d%s",
	       inet_ntoa(request_get_addr(request)->sa.sin.sin_addr),
	       htons(request_get_addr(request)->sa.sin.sin_port),
	       request_get_uri(request));

      char *url = oauthGetAuthorizeUrl(c, callback_url);
      if(url) {
	// Store the temporary access key/secret in the session.
	// We need this for the callback from twitter.
	session_set(session, "key", c->oauthAccessKey);
	session_set(session, "secret", c->oauthAccessSecret);
      } else {
	%>
	<p><b>Acquiring a request token failed</b></p>
<%
      }
      free_tcurl(c);

      // Redirect to TWITTER for HAH authorisation.
      if(url) {
	response_redirect(response, url);
	free(url);
      }
      
    }
%>

</div>
</fieldset>

</div>
<br/>

<div class="submitFooter">
<input type="button" name="save_button" value="Save Settings" onclick="to_submit(this.form)"/>
<input type="reset" value="Cancel Changes"/>
</div>
</form>

</div>
</div>

<div id="floatKiller"></div>
<%@include component/statusinfo.kl1%>

</div>
</div>

</body>
</html>
