#!/bin/sh
### BEGIN INIT INFO
# Provides:          xap
# Required-Start:       $remote_fs $syslog $networking
# Required-Stop:        $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: xAP HAH system
# Description:       xAP Home automation hub
### END INIT INFO
#
# /etc/init.d/xap start [component...]
# /etc/init.d/xap stop [component...]

subsystem="hub xively livebox iserver web sms serial currentcost twitter googlecal plugboard urfrx"
#MYDEV="-i wlan0"

start_web() {
    rm -f /tmp/klone_sess*
    if [ -f /etc/kloned.conf ]; then
	/usr/bin/kloned -f /etc/kloned.conf
    else
	/usr/bin/kloned
    fi
}

stop_web() {
    pkill kloned
}

start_hub() {
    /usr/bin/xap-hub $MYDEV > /var/log/xap-hub.log 2>&1 &
    sleep 1
}

stop_hub() {
    pkill xap-hub
}

start_livebox() {
    INI="/etc/xap.d/xap-livebox.ini"
    if [ `iniget $INI livebox enable 0` -eq 1 ] ;  then 
	/usr/bin/xap-livebox $MYDEV >/var/log/xap-livebox.log 2>&1 &
    fi
}

stop_livebox() {
    pkill xap-livebox
}

start_serial() {
    INI="/etc/xap.d/xap-serial.ini"
    if [ `iniget $INI serial enable 0` -eq 1 ] ;  then 
	/usr/bin/xap-serial $MYDEV >/var/log/xap-serial.log 2>&1 &
    fi
}
stop_serial() {
    pkill xap-serial
}

start_twitter() {
    INI="/etc/xap.d/xap-twitter.ini"
    if [ `iniget $INI twitter enable 0` -eq 1 ] ;  then 
	/usr/bin/xap-twitter $MYDEV >/var/log/xap-twitter.log 2>&1 &
    fi
}
stop_twitter() {
    pkill xap-twitter
}

start_sms() {
    INI="/etc/xap.d/xap-sms.ini"
    if [ `iniget $INI sms enable 0` -eq 1 ] ;  then 
	USBSERIAL=`iniget $INI sms usbserial /dev/ttyUSB0`
	/usr/bin/xap-sms -s $USBSERIAL $MYDEV >/var/log/xap-sms.log 2>&1 &
    fi
}
stop_sms() {
    pkill xap-sms
}

start_xively() {
    INI="/etc/xap.d/xap-xively.ini"
    if [ `iniget $INI xively enable 0` -eq 1 ] ;  then 
	/usr/bin/xap-xively $MYDEV >/var/log/xap-xively.log 2>&1 &
    fi
}
stop_xively() {
    pkill xap-xively
}

start_currentcost() {
    INI="/etc/xap.d/xap-currentcost.ini"
    if [ `iniget $INI currentcost enable 0` -eq 1 ] ;  then 
	USBSERIAL=`iniget $INI currentcost usbserial /dev/ttyUSB0`
	/usr/bin/xap-currentcost -s $USBSERIAL $MYDEV >/var/log/xap-currentcost.log 2>&1 &
    fi
}
stop_currentcost() {
    pkill xap-currentcost
}

start_googlecal() {
    INI="/etc/xap.d/xap-googlecal.ini"
    if [ `iniget $INI googlecal enable 0` -eq 1 ] ;  then 
	/usr/bin/xap-googlecal $MYDEV >/var/log/xap-googlecal.log 2>&1 &
    fi
}
stop_googlecal() {
    pkill xap-googlecal
}

start_plugboard() {
    INI="/etc/xap.d/plugboard.ini"
    if [ `iniget $INI plugboard enable 0` -eq 1 ] ;  then 
	/usr/bin/xap-plugboard >/var/log/xap-plugboard.log 2>&1 &
	pid=$!
	echo $pid >/var/run/xap-plugboard.pid
    fi
}

stop_plugboard() {
    if [ -f /var/run/xap-plugboard.pid ]; then
      pid=`cat /var/run/xap-plugboard.pid`
      if [ -d /proc/$pid ]; then
        kill $pid
      fi
      rm /var/run/xap-plugboard.pid
    fi
}

start_iserver() {
    INI="/etc/xap.d/iserver.ini"
    if [ `iniget $INI iserver enable 0` -eq 1 ] ;  then 
	/usr/bin/iServer $MYDEV >/var/log/iserver.log 2>&1 &
    fi
}
stop_iserver() {
    pkill iServer
}

start_urfrx() {
    INI="/etc/xap.d/xap-urfrx.ini"
    if [ `iniget $INI urfrx enable 0` -eq 1 ] ;  then 
	SERIALPORT=`iniget $INI urfrx serialport /dev/ttyUSB0`
	/usr/bin/xap-urfrx $MYDEV -s $SERIALPORT >/var/log/xap-urfrx.log 2>&1 &
    fi
}
stop_urfrx() {
    pkill xap-urfrx
}

# Param 1: subsystem
all() {
    local i cmd
    IFS=" "
    for i in $subsystem; do
	cmd="$1_$i"
	$cmd 2>/dev/null
    done
}

checkNetwork() {
	retry=0
	while [ $retry -lt 5 ]; do
 		ifconfig eth0 2>&1 | fgrep -q UP
		if [ $? -ne 0 ]; then
                	retry=$(( $retry + 1 ))
			sleep 2
		else
			break
		fi
	done
	if [ $retry -ne 0 ]; then
		sleep 2
	fi
}

# Param 1: [start|stop]
# Param 2: subsystem
subsystem() {
    local i cmd
    IFS=" "
    for i in $subsystem; do
	if [ "$i" = "$2" ]; then
	    cmd="$1_$2"
	    $cmd 2>/dev/null
	    return
	fi
    done
    echo "Subsystem $2 not found"
}

case $1 in
    start|stop)
    	if [ "$1" = "start" ]; then
		checkNetwork
	fi
	if [ -z "$2" ]; then
	    all $1
	else
	    action=$1
	    shift
	    for i in $*; do
	      subsystem $action $i
            done
	fi
	;;
    restart)
	if [ -z "$2" ]; then
	    all stop
	    all start
	else
	    shift
	    for i in $*; do
	      subsystem stop $i
	      subsystem start $i
            done
	fi
	;;
     
    *)
	echo "Usage $0 <start|stop|restart> [component...]"
        exit 1
        ;;
esac

exit 0
