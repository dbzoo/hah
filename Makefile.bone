# $Id$
#
# Compile for ARM target - BeagleBone (armv7)

BUILD_DIR = $(shell pwd)
USERAPPS_DIR = $(BUILD_DIR)/userapps
IMAGES_DIR = $(BUILD_DIR)/images
TARGETS_DIR = $(BUILD_DIR)/targets
CONFIG_SHELL := $(shell if [ -x "$$BASH" ]; then echo $$BASH; \
          else if [ -x /bin/bash ]; then echo /bin/bash; \
          else echo sh; fi ; fi)

###########################################
TOOLCHAIN=/opt/bb/toolchain
CROSS_COMPILE=$(TOOLCHAIN)/bin/arm-linux-

AR              = $(CROSS_COMPILE)ar
AS              = $(CROSS_COMPILE)as
LD              = $(CROSS_COMPILE)ld
CC              = $(CROSS_COMPILE)gcc
CXX             = $(CROSS_COMPILE)g++
CPP             = $(CROSS_COMPILE)cpp
NM              = $(CROSS_COMPILE)nm
STRIP           = $(CROSS_COMPILE)strip
OBJCOPY         = $(CROSS_COMPILE)objcopy
OBJDUMP         = $(CROSS_COMPILE)objdump
RANLIB          = $(CROSS_COMPILE)ranlib

LIB_PATH        = $(TOOLCHAIN)/arm-unknown-linux-gnueabi/lib
LIBDIR          = $(TOOLCHAIN)/arm-unknown-linux-gnueabi/lib
LIBCDIR         = $(TOOLCHAIN)/arm-unknown-linux-gnueabi

###########################################
#
# Application-specific settings
#
###########################################
INSTALL_DIR = $(TARGETS_DIR)/bb.src

###########################################
#
# Complete list of applications
#
###########################################
export OPENSOURCE_DIR=$(USERAPPS_DIR)/opensource
SUBDIRS_OPENSOURCE = \
        $(OPENSOURCE_DIR)/ini \
	$(OPENSOURCE_DIR)/lua \
	$(OPENSOURCE_DIR)/lrexlib \
	$(OPENSOURCE_DIR)/luafilesystem \
	$(OPENSOURCE_DIR)/luasocket \
	$(OPENSOURCE_DIR)/penlight \
	$(OPENSOURCE_DIR)/jsmn

HAH_DIR=$(USERAPPS_DIR)/hah
SUBDIRS_HAH = \
	$(HAH_DIR)/xaplib2 \
	$(HAH_DIR)/xap-hub \
	$(HAH_DIR)/xap-livebox \
	$(HAH_DIR)/xap-snoop \
	$(HAH_DIR)/xap-xively \
	$(HAH_DIR)/xap-sms \
	$(HAH_DIR)/xap-currentcost \
	$(HAH_DIR)/xap-googlecal \
	$(HAH_DIR)/xap-twitter \
	$(HAH_DIR)/xap-plugboard \
	$(HAH_DIR)/xap-serial \
	$(HAH_DIR)/iServer \
	$(HAH_DIR)/xap-flash \
	$(HAH_DIR)/xap-urfrx \

SUBDIRS = $(SUBDIRS_OPENSOURCE) $(SUBDIRS_HAH)

OPENSOURCE_APPS = ini readline ncurses lua lrexlib luafilesystem luasocket penlight jsmn
HAH_APPS = xaplib2 xap-hub xap-livebox xap-snoop xap-xively xap-sms iServer \
	xap-currentcost xap-googlecal xap-twitter xap-serial xap-plugboard \
	xap-flash xap-urfrx

ALLAPPS = $(OPENSOURCE_APPS) $(HAH_APPS)

all: app

app: prebuild $(ALLAPPS)
# All apps are built we don't need the dev stuff anymore.
	$(RM) -rf $(INSTALL_DIR)/include $(INSTALL_DIR)/man

prebuild:
	mkdir -p $(INSTALL_DIR)/bin $(INSTALL_DIR)/usr/bin $(INSTALL_DIR)/lib $(INSTALL_DIR)/etc_ro_fs

hah:	prebuild $(HAH_APPS)

jsmn:
	$(MAKE) -C $(OPENSOURCE_DIR)/jsmn

xaplib2:
	$(MAKE) -C $(HAH_DIR)/xaplib2
	install -m 755 -d $(INSTALL_DIR)/lib
	install -m 644 $(HAH_DIR)/xaplib2/libxap2.so $(INSTALL_DIR)/lib
	$(STRIP) $(INSTALL_DIR)/lib/libxap2.so
	install -m 755 -d $(INSTALL_DIR)/include
	install -m 644 $(HAH_DIR)/xaplib2/*.h $(INSTALL_DIR)/include

xap-hub: xaplib2
	$(MAKE) -C $(HAH_DIR)/xap-hub
	install -m 755 -d $(INSTALL_DIR)/usr/bin
	install -m 755 $(HAH_DIR)/xap-hub/xap-hub $(INSTALL_DIR)/usr/bin
	$(STRIP) $(INSTALL_DIR)/usr/bin/xap-hub

xap-urfrx: xaplib2
	$(MAKE) -C $(HAH_DIR)/xap-urfrx
	install -m 755 -d $(INSTALL_DIR)/usr/bin
	install -m 755 $(HAH_DIR)/xap-urfrx/xap-urfrx $(INSTALL_DIR)/usr/bin
	$(STRIP) $(INSTALL_DIR)/usr/bin/xap-urfrx

xap-livebox: xaplib2
	$(MAKE) -C $(HAH_DIR)/xap-livebox
	install -m 755 -d $(INSTALL_DIR)/usr/bin
	install -m 755 $(HAH_DIR)/xap-livebox/xap-livebox $(INSTALL_DIR)/usr/bin
	$(STRIP) $(INSTALL_DIR)/usr/bin/xap-livebox

xap-sms: xaplib2
	$(MAKE) -C $(HAH_DIR)/xap-sms
	install -m 755 -d $(INSTALL_DIR)/usr/bin
	install -m 755 $(HAH_DIR)/xap-sms/xap-sms $(INSTALL_DIR)/usr/bin
	$(STRIP) $(INSTALL_DIR)/usr/bin/xap-sms

xap-snoop: xaplib2
	$(MAKE) -C $(HAH_DIR)/xap-snoop
	install -m 755 -d $(INSTALL_DIR)/usr/bin
	install -m 755 $(HAH_DIR)/xap-snoop/xap-snoop $(INSTALL_DIR)/usr/bin
	$(STRIP) $(INSTALL_DIR)/usr/bin/xap-snoop

xap-serial: xaplib2
	$(MAKE) -C $(HAH_DIR)/xap-serial
	install -m 755 -d $(INSTALL_DIR)/usr/bin
	install -m 755 $(HAH_DIR)/xap-serial/xap-serial $(INSTALL_DIR)/usr/bin
	$(STRIP) $(INSTALL_DIR)/usr/bin/xap-serial

xap-xively: xaplib2
	$(MAKE) -C $(HAH_DIR)/xap-xively
	install -m 755 -d $(INSTALL_DIR)/usr/bin
	install -m 755 $(HAH_DIR)/xap-xively/xap-xively $(INSTALL_DIR)/usr/bin
	$(STRIP) $(INSTALL_DIR)/usr/bin/xap-xively

xap-currentcost: xaplib2 libxml2
	$(MAKE) -C $(HAH_DIR)/xap-currentcost
	install -m 755 -d $(INSTALL_DIR)/usr/bin
	install -m 755 $(HAH_DIR)/xap-currentcost/xap-currentcost $(INSTALL_DIR)/usr/bin
	$(STRIP) $(INSTALL_DIR)/usr/bin/xap-currentcost

libopenssl:
	@if [ ! -d $(OPENSOURCE_DIR)/openssl-0.9.8l ]; then \
	   (cd $(OPENSOURCE_DIR); tar zxf openssl-0.9.8l.tar.gz; ln -s openssl-0.9.8l openssl); \
	fi
	if [ ! -f $(OPENSOURCE_DIR)/openssl/Makefile ]; then \
	  (cd $(OPENSOURCE_DIR)/openssl; ./Configure no-hw dist) \
	fi
	$(MAKE) -C $(OPENSOURCE_DIR)/openssl CC=$(CC) AR="$(AR) r" RANLIB=$(RANLIB)
# CURL wants to find them in the lib subdirectory.
	test -d $(OPENSOURCE_DIR)/openssl/lib || mkdir $(OPENSOURCE_DIR)/openssl/lib
	cp $(OPENSOURCE_DIR)/openssl/*.a $(OPENSOURCE_DIR)/openssl/lib

libcurl: libopenssl
	@if [ ! -d $(OPENSOURCE_DIR)/curl-7.19.7 ]; then \
	   (cd $(OPENSOURCE_DIR); tar zxf curl-7.19.7.tar.gz; ln -s curl-7.19.7 curl; rm -f $(OPENSOURCE_DIR)/curl/Makefile) \
	fi
	@if [ ! -f $(OPENSOURCE_DIR)/curl/Makefile ]; then \
	    (cd $(OPENSOURCE_DIR)/curl; ./configure CFLAGS='-Os' LDFLAGS='-Wl,-s -Wl,-Bsymbolic -Wl,--gc-sections' --host=arm-linux --with-ssl=$(OPENSOURCE_DIR)/openssl --with-random=/dev/urandom --disable-manual --disable-static --disable-proxy --enable-optimize --disable-tftp --disable-ftp --disable-dict --disable-ldap --disable-file --disable-telnet --disable-largefile --disable-debug --with-ca-bundle=/etc_ro_fs/curl-ca-bundle.crt --prefix=$(INSTALL_DIR)) \
	fi
# Download the latest CERT bundle
	test -f $(INSTALL_DIR)/etc_ro_fs/curl-ca-bundle.crt || wget -O $(INSTALL_DIR)/etc_ro_fs/curl-ca-bundle.crt http://curl.haxx.se/ca/cacert.pem
	$(MAKE) -C $(OPENSOURCE_DIR)/curl install-strip
	$(RM) -rf $(INSTALL_DIR)/share

libxml2:
	@if [ ! -d $(OPENSOURCE_DIR)/libxml2-2.7.6 ]; then \
	   (cd $(OPENSOURCE_DIR); tar zxf libxml2-2.7.6.tar.gz; ln -s libxml2-2.7.6 libxml2) \
	fi
	@if [ ! -f $(OPENSOURCE_DIR)/libxml2/Makefile ]; then \
	  (cd $(OPENSOURCE_DIR)/libxml2; ./configure --host=arm-linux --disable-static --without-docbook --without-python --without-schematron --without-schemas --without-threads --without-zlib --without-valid --without-pattern --without-legacy --without-xinclude --without-modules --without-catalog --without-ftp --without-http --without-zlib --without-python --without-xptr --without-iso8859x --prefix=$(INSTALL_DIR)) \
	fi
	$(MAKE) -C $(OPENSOURCE_DIR)/libxml2
# install-strip is BROKEN with the above directive.. nice one.  So we do it manually.
	install -m 644 $(OPENSOURCE_DIR)/libxml2/.libs/libxml2.so.2.7.6 $(INSTALL_DIR)/lib
	$(STRIP) $(INSTALL_DIR)/lib/libxml2.so.2.7.6
	test -L $(INSTALL_DIR)/lib/libxml2.so || ln -s libxml2.so.2.7.6 $(INSTALL_DIR)/lib/libxml2.so
	test -L $(INSTALL_DIR)/lib/libxml2.so.2 || ln -s libxml2.so.2.7.6 $(INSTALL_DIR)/lib/libxml2.so.2
	install -m 755 -d $(INSTALL_DIR)/include
	install -m 755 -d $(INSTALL_DIR)/include/libxml2
	cp -r $(OPENSOURCE_DIR)/libxml2/include/libxml $(INSTALL_DIR)/include/libxml2

libgcal: libxml2 libcurl
	@if [ ! -d $(OPENSOURCE_DIR)/libgcal-0.9.6 ]; then \
	   (cd $(OPENSOURCE_DIR); tar jxf libgcal-0.9.6.tar.bz2; ln -s libgcal-0.9.6 libgcal) \
	fi
# GCC3 doesn't like -Wno-pointer-sign so remove it.
	@if [ ! -f $(OPENSOURCE_DIR)/libgcal/Makefile ]; then \
	  (cd $(OPENSOURCE_DIR)/libgcal-0.9.6; LIBCURL_LIBS=-lcurl LIBXML_LIBS=-L$(INSTALL_DIR)/lib LIBXML_CFLAGS="-I$(INSTALL_DIR)/include -I$(INSTALL_DIR)/include/libxml2" ./configure --host=arm-linux --disable-check --disable-static --prefix=$(INSTALL_DIR); mv Makefile Makefile.orig; sed 's/-Wno-pointer-sign//' Makefile.orig > Makefile ) \
	fi
	$(MAKE) -C $(OPENSOURCE_DIR)/libgcal install-strip

xap-googlecal: xaplib2 libgcal libxml2 libcurl
	$(MAKE) -C $(HAH_DIR)/xap-googlecal
	install -m 755 -d $(INSTALL_DIR)/usr/bin
	install -m 755 $(HAH_DIR)/xap-googlecal/xap-googlecal $(INSTALL_DIR)/usr/bin
	$(STRIP) $(INSTALL_DIR)/usr/bin/xap-googlecal

xap-twitter: xaplib2 libcurl jsmn
	$(MAKE) -C $(HAH_DIR)/xap-twitter
	install -m 755 -d $(INSTALL_DIR)/usr/bin
	install -m 755 $(HAH_DIR)/xap-twitter/xap-twitter $(INSTALL_DIR)/usr/bin
	$(STRIP) $(INSTALL_DIR)/usr/bin/xap-twitter

xap-plugboard:
	$(MAKE) -C $(HAH_DIR)/xap-plugboard

xap-flash:
	$(MAKE) -C $(HAH_DIR)/xap-flash

penlight:
	install -m 755 -d $(INSTALL_DIR)/usr/share/lua/5.1/pl
	install -m 644 $(OPENSOURCE_DIR)/penlight/lua/pl/*.lua $(INSTALL_DIR)/usr/share/lua/5.1/pl

ncurses:
	if [ ! -d $(OPENSOURCE_DIR)/ncurses-5.9 ]; then \
	  (cd $(OPENSOURCE_DIR); \
	  wget http://ftp.gnu.org/pub/gnu/ncurses/ncurses-5.9.tar.gz; \
	  tar zxf ncurses-5.9.tar.gz \
	  ) \
	fi
	(cd $(OPENSOURCE_DIR)/ncurses-5.9; ./configure --host=arm-linux --prefix=$(INSTALL_DIR) --without-cxx --without-manpages --without-progs --without-tests --without-debug --with-shared)
	$(MAKE) -C $(OPENSOURCE_DIR)/ncurses-5.9 install

readline:
	if [ ! -d $(OPENSOURCE_DIR)/readline-6.2 ]; then \
	  (cd $(OPENSOURCE_DIR); \
	  if [ ! -f readline-6.2.tar.gz ]; then \
		  wget http://ftp.gnu.org/pub/gnu/readline/readline-6.2.tar.gz; \
	  fi; \
	  tar zxf readline-6.2.tar.gz; \
	  cd readline-6.2; \
	  for p in 1 2 3 4 5; do \
		wget http://ftp.gnu.org/pub/gnu/readline/readline-6.2-patches/readline62-00$$p; \
		patch -p0 < readline62-00$$p; \
	  done \
	  ) \
	fi
	(cd $(OPENSOURCE_DIR)/readline-6.2; ./configure --host=arm-linux --prefix=$(INSTALL_DIR))
	$(MAKE) -C $(OPENSOURCE_DIR)/readline-6.2 install

lua:
	$(MAKE) -C $(OPENSOURCE_DIR)/lua echo linux CC=$(CC) MYCFLAGS=-I$(INSTALL_DIR)/include MYLDFLAGS=-L$(INSTALL_DIR)/lib
	install -m 755 $(OPENSOURCE_DIR)/lua/src/lua $(INSTALL_DIR)/usr/bin

iServer: xaplib2
	$(MAKE) -C $(HAH_DIR)/iServer
	install -m 755 -d $(INSTALL_DIR)/usr/bin
	install -m 755 $(HAH_DIR)/iServer/iServer $(INSTALL_DIR)/usr/bin
	$(STRIP) $(INSTALL_DIR)/usr/bin/iServer

luasocket:
	$(MAKE) -C $(OPENSOURCE_DIR)/luasocket install LD="$(CC) -shared" PLATFORM=linux INSTALL_TOP="$(INSTALL_DIR)/usr" CFLAGS="-I$(OPENSOURCE_DIR)/lua/src"
	$(STRIP) $(INSTALL_DIR)/usr/lib/lua/5.1/socket/core.so
	$(STRIP) $(INSTALL_DIR)/usr/lib/lua/5.1/mime/core.so

luafilesystem:
	$(MAKE) -C $(OPENSOURCE_DIR)/luafilesystem install PLATFORM=linux PREFIX="$(INSTALL_DIR)/usr" CFLAGS="-I$(OPENSOURCE_DIR)/lua/src"
	$(STRIP) $(INSTALL_DIR)/usr/lib/lua/5.1/lfs.so

lrexlib:
	mkdir -p $(INSTALL_DIR)/usr/lib/lua/5.1
	$(MAKE) -C $(OPENSOURCE_DIR)/lrexlib build_posix AR="$(AR) rcu" PREFIX="$(INSTALL_DIR)/usr" CFLAGS="-I$(OPENSOURCE_DIR)/lua/src"
	$(STRIP) $(INSTALL_DIR)/usr/lib/lua/5.1/rex_posix.so

ipkg:
	@if [ ! -f $(OPENSOURCE_DIR)/ipkg/Makefile ]; then \
	   (cd $(OPENSOURCE_DIR)/ipkg; ./configure --host=arm --prefix=$(INSTALL_DIR)); \
	fi
	$(MAKE) -C $(OPENSOURCE_DIR)/ipkg
	$(MAKE) -C $(OPENSOURCE_DIR)/ipkg install-exec
	$(STRIP) $(INSTALL_DIR)/bin/ipkg-cl

ini:
	$(MAKE) -C $(OPENSOURCE_DIR)/ini install

clean: app_clean
	rm -fr $(INSTALL_DIR)
	rm -rf $(OPENSOURCE_DIR)/curl-7.19.7 $(OPENSOURCE_DIR)/curl
	rm -rf $(OPENSOURCE_DIR)/libxml2-2.7.6 $(OPENSOURCE_DIR)/libxml2
	rm -rf $(OPENSOURCE_DIR)/openssl-0.9.8l $(OPENSOURCE_DIR)/openssl
	rm -rf $(OPENSOURCE_DIR)/libgcal-0.9.6 $(OPENSOURCE_DIR)/libgcal

app_clean:
	for dir in $(SUBDIRS); do \
	  $(MAKE) -C $$dir clean ;\
	done
	$(RM) -rf $(INSTALL_DIR)/include

export  INSTALL_DIR USERAPPS_DIR CROSS_COMPILE TOOLCHAIN \
	AS LD CC CXX AR NM RANLIB STRIP OBJCOPY OBJDUMP LIB_PATH LIBCDIR LIBDIR \
	LINUXDIR
