<%! /* -*- mode:c;coding:utf-8; -*- */
#include "minIni.h"
#include "login.h"
#include "const.h"

#define sizearray(a)  (sizeof(a) / sizeof((a)[0]))

static int reboot = 0;

static struct {
	 char uid[5];
	 char instance[30];
	 char temp_unit[2];
	 int devices1wire;
	 int devicesrf;
	 char cc_uid[5];
	 char cc_instance[30];
	 char cc_enable[2];
	 char cc_hysteresis[3];
	 char cc_usbserial[16];
	 char cc_model[20];
     char sms_enable[2];
	 char sms_usbserial[16];
	 char sms_uid[5];
	 char sms_instance[30];
	 char ph_enable[2]
} ini;

struct _label {
	 int id;
	 char *name;
	 char *section;
	 char *deflt;
} labels[] = {
	 {1,"rf","rf","RF 1"},
	 {2,"rf","rf","RF 2"},
	 {3,"rf","rf","RF 3"},
	 {4,"rf","rf","RF 4"},
	 {5,"rf","rf","RF 5"},
	 {6,"rf","rf","RF 6"},
	 {7,"rf","rf","RF 7"},
	 {8,"rf","rf","RF 8"},
	 {9,"rf","rf","RF 9"},
	 {10,"rf","rf","RF 10"},
	 {11,"rf","rf","RF 11"},
	 {12,"rf","rf","RF 12"},
	 {1,"input","input","Input 1"},
	 {2,"input","input","Input 2"},
	 {3,"input","input","Input 3"},
	 {4,"input","input","Input 4"},
	 {1,"relay","relay","Relay 1"},
	 {2,"relay","relay","Relay 2"},
	 {3,"relay","relay","Relay 3"},
	 {4,"relay","relay","Relay 4"},
	 {1,"sensor","1wire","Sensor 1"},
	 {2,"sensor","1wire","Sensor 2"},
	 {3,"sensor","1wire","Sensor 3"},
	 {4,"sensor","1wire","Sensor 4"},
	 {5,"sensor","1wire","Sensor 5"},
	 {6,"sensor","1wire","Sensor 6"},
	 {7,"sensor","1wire","Sensor 7"},
	 {8,"sensor","1wire","Sensor 8"},
	 {9,"sensor","1wire","Sensor 9"},
	 {10,"sensor","1wire","Sensor 10"},
	 {11,"sensor","1wire","Sensor 11"},
	 {12,"sensor","1wire","Sensor 12"},
	 {13,"sensor","1wire","Sensor 13"},
	 {14,"sensor","1wire","Sensor 14"},
	 {15,"sensor","1wire","Sensor 15"},
};

struct _label *findLabel(int id, char *name) {
	 int i=0;
	 for(i=0; i < sizearray(labels); i++) {
		  if(labels[i].id == id && strcmp(labels[i].name,name) == 0)
			   return &labels[i];
	 }
	 return NULL;
}

static void upperstr(char *s) {
	 while(*s) {
		  *s = toupper(*s);
		  s++;
	 }
}

static void submit_form() {
	 const char *uid = request_get_arg(request,"uid");
	 const char *instance = request_get_arg(request,"instance");
	 if(uid && strcmp(uid,ini.uid)) {
		  upperstr((char *)uid);
		  ini_puts("xap","uid",uid,con.inifile);
		  reboot = 1;
	 }
	 if(instance && strcmp(instance,ini.instance)) {
		  ini_puts("xap","instance",instance,con.inifile);
		  reboot = 1;
	 }

	 int i;
	 char key[50];
	 for(i=0; i<sizearray(labels); i++) {
		  sprintf(key,"%s%d",labels[i].name, labels[i].id);
		  const char *value = request_get_arg(request, key);
		  if(value) {
			   strcat(key,".label");
			   ini_puts(labels[i].section,key,value,con.inifile);
		  }
	 }
	 
	 const char *dev1wire = request_get_arg(request, "sensor_count");
	 int wire = atoi(dev1wire);
	 if(wire != ini.devices1wire) {
		  ini_puts("1wire","devices", dev1wire, con.inifile);
		  ini.devices1wire = wire;
		  reboot = 1;
	 }

	 const char *temp_unit = request_get_arg(request, "temp");
	 if(*temp_unit != ini.temp_unit[0]) {
		  ini_puts("1wire","temp_unit", temp_unit, con.inifile);
		  ini.temp_unit[0] = *temp_unit;
	 }

	 int cc_restart = 0;

	 const char *cc_uid = request_get_arg(request,"cc_uid");
	 const char *cc_instance = request_get_arg(request,"cc_instance");
	 if(cc_uid && strcmp(cc_uid,ini.cc_uid)) {
		  upperstr((char *)cc_uid);
		  ini_puts("currentcost","uid",cc_uid,con.inifile);
		  cc_restart = 1;
	 }
	 if(cc_instance && strcmp(cc_instance,ini.cc_instance)) {
		  ini_puts("currentcost","instance",cc_instance,con.inifile);
		  cc_restart = 1;
	 }

	 const char *cc_meter = request_get_arg(request,"cc_meter");
	 if(cc_meter) {
		  if((*cc_meter == '1' && ini.cc_enable[0] == '0') ||
			 (*cc_meter == '0' && ini.cc_enable[0] == '1')) {
			   ini_puts("currentcost","enable",cc_meter,con.inifile);
			   cc_restart = 1;
		  }
	 }

	 const char *cc_hysteresis = request_get_arg(request, "cc_hysteresis");
	 if(cc_hysteresis && strcmp(cc_hysteresis, ini.cc_hysteresis)) {
		  ini_puts("currentcost","hysteresis", cc_hysteresis, con.inifile);
		  cc_restart = 1;
	 }

	 const char *cc_usbserial = request_get_arg(request, "cc_usbserial");
	 if(cc_usbserial && strcmp(cc_usbserial, ini.cc_usbserial)) {
		  ini_puts("currentcost","usbserial", cc_usbserial, con.inifile);
		  cc_restart = 1;
	 }

	 const char *cc_model = request_get_arg(request, "cc_model");
	 if(cc_model && strcmp(cc_model, ini.cc_model)) {
		  ini_puts("currentcost","model", cc_model, con.inifile);
		  cc_restart = 1;
	 }

	 if(cc_restart) {
	     char *argv[] = {"/etc/init.d/xap","restart","currentcost", NULL};
	     subprocess(argv);
	 }

	 int sms_restart = 0;
	 const char *sms_enable = request_get_arg(request,"sms_enable");
	 if(sms_enable) {
		  if((*sms_enable == '1' && ini.sms_enable[0] == '0') ||
			 (*sms_enable == '0' && ini.sms_enable[0] == '1')) {
			   ini_puts("sms","enable",sms_enable,con.inifile);
			   sms_restart = 1;
		  }
	 }

	 const char *sms_usbserial = request_get_arg(request, "sms_usbserial");
	 if(sms_usbserial && strcmp(sms_usbserial, ini.sms_usbserial)) {
		  ini_puts("sms","usbserial", sms_usbserial, con.inifile);
		  sms_restart = 1;
	 }

	 if(sms_restart) {
	     char *argv[] = {"/etc/init.d/xap","restart", "sms", NULL};
	     subprocess(argv);
	 }
}

static void readIni() {
	 ini_gets("pachube","enable","0",ini.ph_enable,sizeof(ini.ph_enable),con.inifile);
	 ini_gets("xap","uid","00DB",ini.uid,sizeof(ini.uid),con.inifile);
	 ini_gets("xap","instance","Controller",ini.instance,sizeof(ini.instance),con.inifile);
	 ini.devices1wire = ini_getl("1wire","devices", 0, con.inifile);
	 ini.devicesrf = ini_getl("rf","devices", 0, con.inifile);
	 ini_gets("1wire","temp_unit", "C", ini.temp_unit, sizeof(ini.temp_unit), con.inifile);
	 ini_gets("currentcost","enable","0",ini.cc_enable,sizeof(ini.cc_enable),con.inifile);
	 ini_gets("currentcost","hystersis","10",ini.cc_hysteresis,sizeof(ini.cc_hysteresis),con.inifile);
	 ini_gets("currentcost","usbserial","/dev/ttyUSB0",ini.cc_usbserial,sizeof(ini.cc_usbserial),con.inifile);
	 ini_gets("currentcost","model","CLASSIC",ini.cc_model,sizeof(ini.cc_model),con.inifile);
	 ini_gets("currentcost","uid","00DC",ini.cc_uid,sizeof(ini.cc_uid),con.inifile);
	 ini_gets("currentcost","instance","CurrentCost",ini.cc_instance,sizeof(ini.cc_instance),con.inifile);
	 ini_gets("sms","enable","0",ini.sms_enable,sizeof(ini.sms_enable),con.inifile);
	 ini_gets("sms","usbserial","/dev/ttyUSB0",ini.sms_usbserial,sizeof(ini.sms_usbserial),con.inifile);
	 ini_gets("sms","uid","00DD",ini.sms_uid,sizeof(ini.sms_uid),con.inifile);
	 ini_gets("sms","instance","sms",ini.sms_instance,sizeof(ini.sms_instance),con.inifile);
}

static char buf[20];
char *kv(char *name, int id) {
	 struct _label *label = findLabel(id, name);
	 if (label == NULL) return "?";
	 char key[30];
	 sprintf(key, "%s%d.label", name, id);
	 ini_gets(label->section, key, label->deflt, buf, sizeof(buf), con.inifile);
	 return buf;
}
%>
<%
REQUIRE_AUTH(SCRIPT_NAME);
readIni();
const char *action = request_get_arg(request,"action");
if(action && strcmp(action,"Apply") == 0) {
	 submit_form(out);
	 readIni();
}
if(action && strcmp(action,"Reboot") == 0) {
	  response_redirect(response, "reboot.kl1");
}
%>
<html>
<head>
<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=iso-8859-1" />
<link type="text/css" rel="stylesheet" href="style/current/style.css" />
<!--[if IE]><link type="text/css" rel="stylesheet" href="style/current/style_ie.css" /><![endif]-->
<script type="text/javascript" src="common.js"></script>
<script type="text/javascript">
function to_submit(F) {
	F.save_button.value = "Saving";
	F.action.value = "Apply";
	apply(F);
}
function reboot(F) {
	 F.reboot_button.value = "Rebooting";
	 F.action.value = "Reboot";
	 apply(F);
}
addEvent(window,"load",function() {
	 show_layer_ext(document.frmControl.cc_meter, 'idcc', 1 == <%= ini.cc_enable %>);
	 show_layer_ext(document.frmControl.sms_enable, 'idsms', 1 == <%= ini.sms_enable %>);
	 });

</script>
</head>
<title>Livebox</title>
<body class="gui">
<div id="wrapper">
<div id="content">
<div id="header">

<%@include component/heading.kl1%>

<div id="menu">
 <div id="menuMain">
  <ul id="menuMainList">
   <li class="current"><span>Automation</span>
    <div id="menuSub">
     <ul id="menuSubList">
<%
       MENU_ITEM("automation.kl1","Control");
%>
       <li><span>Configure</span></li>
<%
       MENU_ITEM("calendar.kl1","Calendar");
       MENU_ITEM("twitter.kl1","Twitter");
       MENU_ITEM("pachube.kl1","Pachube");
       if(ini.ph_enable[0] == '1') {
		  MENU_ITEM("graph.kl1","Graph");
       }
%>
    </ul>
    </div>
   </li>
<%
	  MENU_ITEM("setup.kl1","Setup");
%>
  </ul>
 </div>
</div>

</div>

<div id="main">
<div id="contents">
<br/>
<%
int i;
%>
<form name="frmControl" action="<%= SCRIPT_NAME %>" method="post">
<input type="hidden" name="action" />
<h2>LiveBox Hardware</h2>
<fieldset>
  <legend>HAH Controller</legend>

  <div class="setting">
    <div class="label">xAP UID</div>
    <input maxlength="4" size="4" name="uid" value="<%= ini.uid %>" onblur="isxdigit(this,'UID')"/>
    <span class="default">(Default: 00DB, Range: 0000 - FFFF)</span>
  </div>

  <div class="setting">
    <div class="label">xAP Instance</div>
    <input maxlength="30" size="25" name="instance" value="<%= ini.instance %>"/>
    <span class="default">(Default: Controller)</span>
  </div>
</fieldset>

<table><tr>

<%
if(ini.devicesrf > 0) {
%>
<td valign="top"><fieldset>
<legend>RF</legend>
<table>
<tr>
<th>Item</th>
<th>Label</th>
<%
for(i=1; i<=ini.devicesrf; i++) {
	   io_printf(out,"<tr>%sRF %d</td>", alt_td(i), i);
	   io_printf(out,"%s<input maxlength=\"20\" size=\"20\" type=\"text\" name=\"rf%d\" value=\"%s\"></td></tr>", alt_td(i), i, kv("rf",i));
}
%>
</table>
</fieldset></td>
<%
}
%>

<td valign="top"><fieldset>
<legend>Relay</legend>
<table>
<tr>
<th>Item</th>
<th>Label</th>
<%
for(i=1; i<5; i++) {
io_printf(out,"<tr>%sRelay %d</td>", alt_td(i), i);
io_printf(out,"%s<input maxlength=\"20\" size=\"20\" type=\"text\" name=\"relay%d\" value=\"%s\"></td></tr>", alt_td(i), i, kv("relay",i));
}
%>
</table>
</fieldset></td>
</tr><tr>
<td valign="top"><fieldset>
<legend>Input</legend>
<table>
<tr>
<th>Item</th>
<th>Label</th>
<%
for(i=1; i<5; i++) {
io_printf(out,"<tr>%sInput %d</td>", alt_td(i), i);
io_printf(out,"%s<input maxlength=\"20\" size=\"20\" type=\"text\" name=\"input%d\" value=\"%s\"></td></tr>", alt_td(i), i, kv("input",i));
}
%>
</table>
</fieldset></td>

<%
if(ini.devices1wire > 0) {
%>
<td valign="top"><fieldset>
<legend>Temperature</legend>
<table>
<tr>
<th>Item</th>
<th>Label</th>
<%
for(i=1; i<=ini.devices1wire; i++) {
io_printf(out,"<tr>%sSensor %d</td>", alt_td(i), i);
io_printf(out,"%s<input maxlength=\"20\" size=\"20\" type=\"text\" name=\"sensor%d\" value=\"%s\"></td></tr>", alt_td(i), i, kv("sensor",i));
		  }
%>
</table>
</fieldset></td>
<%
}
%>
</tr>
</table>

<br/>
<h2>Additional Hardware</h2>
<fieldset>
<legend>1wire devices</legend>
  <div class="setting">
    <div class="label">Sensor Count</div>
	<input class="num" type="text" name="sensor_count" onblur="valid_range(this,1,15,'Sensors')" value="<% io_printf(out,"%d",ini.devices1wire); %>" maxlength="2" size="2"/>
  </div>
  <div class="setting">
    <div class="label">Temperature units</div>
	<input class="spaceradio" type="radio" value="C" name="temp" <% if(ini.temp_unit[0] == 'C') { %> checked="checked"<% } %>/>Celsius&nbsp;
    <input class="spaceradio" type="radio" value="F" name="temp" <% if(ini.temp_unit[0] == 'F') { %> checked="checked"<% } %>/>Fahrenheit
  </div>
</fieldset>
<fieldset>
  <legend>Current Cost</legend>
  <div class="setting">
    <div class="label">USB attached</div>
	<input class="spaceradio" type="radio" value="1" name="cc_meter" onclick="show_layer_ext(this, 'idcc', true);"<% if(ini.cc_enable[0] == '1') { %> checked="checked"<% } %>/>Enable&nbsp;
    <input class="spaceradio" type="radio" value="0" name="cc_meter" onclick="show_layer_ext(this, 'idcc', false);"<% if(ini.cc_enable[0] == '0') { %> checked="checked"<% } %>/>Disable
  </div>
  <div class="setting" id="idcc">
  <div class="setting">
    <div class="label">xAP UID</div>
    <input maxlength="4" size="4" name="cc_uid" value="<%= ini.cc_uid %>" onblur="isxdigit(this,'UID')"/>
    <span class="default">(Default: 00DC, Range: 0000 - FFFF)</span>
  </div>
  <div class="setting">
    <div class="label">xAP Instance</div>
    <input maxlength="30" size="25" name="cc_instance" value="<%= ini.cc_instance %>"/>
    <span class="default">(Default: CurrentCost)</span>
  </div>
   <div class="setting">
    <div class="label">Model</div>
     <select name="cc_model">
     <option value="CLASSIC" <% if(strcmp(ini.cc_model,"CLASSIC")==0) { %>selected="selected"<% } %>>Classic</option>
     <option value="CC128" <% if(strcmp(ini.cc_model,"CC128")==0) { %>selected="selected"<% } %>>CC128</option>
     </select>
   </div>
   <div class="setting">
    <div class="label">USB Serial Device</div>
	<input type="text" name="cc_usbserial" value="<%= ini.cc_usbserial %>" maxlength="15" size="15"/>
	 <span class="default">(Default: /dev/ttyUSB0)</span>
   </div>
   <div class="setting">
    <div class="label">Sensor Hysteresis</div>
	<input class="num" type="text" name="cc_hysteresis" onblur="is_digit(this,'Hysteresis')" value="<%= ini.cc_hysteresis %>" maxlength="3" size="3"/>
	 <span class="default">(Default: 10 Watts)</span>
   </div>
  </div>

</fieldset>

<fieldset>
  <legend>GSM Phone</legend>
  <div class="setting">
    <div class="label">USB attached</div>
	<input class="spaceradio" type="radio" value="1" name="sms_enable" onclick="show_layer_ext(this, 'idsms', true);"<% if(ini.sms_enable[0] == '1') { %> checked="checked"<% } %>/>Enable&nbsp;
    <input class="spaceradio" type="radio" value="0" name="sms_enable" onclick="show_layer_ext(this, 'idsms', false);"<% if(ini.sms_enable[0] == '0') { %> checked="checked"<% } %>/>Disable
  </div>
  <div class="setting" id="idsms">
  <div class="setting">
    <div class="label">xAP UID</div>
    <input maxlength="4" size="4" name="sms_uid" value="<%= ini.sms_uid %>" onblur="isxdigit(this,'UID')"/>
    <span class="default">(Default: 00DD, Range: 0000 - FFFF)</span>
  </div>
  <div class="setting">
    <div class="label">xAP Instance</div>
    <input maxlength="30" size="25" name="sms_instance" value="<%= ini.sms_instance %>"/>
    <span class="default">(Default: sms)</span>
  </div>
   <div class="setting">
    <div class="label">USB Serial Device</div>
	<input type="text" name="sms_usbserial" value="<%= ini.sms_usbserial %>" maxlength="15" size="15"/>
	 <span class="default">(Default: /dev/ttyUSB0)</span>
   </div>
  </div>

</fieldset>

<br/>

<div class="submitFooter">
<input type="button" name="save_button" value="Save Settings" onclick="to_submit(this.form)" />
<input type="reset" value="Cancel Changes"/>
<% if(reboot) { %><input type="button" name="reboot_button" value="Reboot" onclick="reboot(this.form)" /><% } %>
</div>
</form>

</div>
</div>

<div id="floatKiller"></div>
<%@include component/statusinfo.kl1%>

</div>
</div>

</body>
</html>

